-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local ET
System.import(function (out)
  ET = out.ET
end)
System.namespace("ET", function (namespace)
  namespace.class("NetThreadComponentAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.NetThreadComponent.Instance = self

      self.ThreadSynchronizationContext = ETCold.ThreadSynchronizationContext.getInstance()
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.NetThreadComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)


  namespace.class("NetThreadComponentUpdateSystem", function (namespace)
    local LateUpdate
    LateUpdate = function (this, self)
      for _, service in System.each(self.Services) do
        service:Update()
      end
    end
    return {
      base = function (out)
        return {
          out.ET.LateUpdateSystem_1(out.ET.NetThreadComponent)
        }
      end,
      LateUpdate = LateUpdate,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)


  namespace.class("NetThreadComponentDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.NetThreadComponentSystem.Stop(self)
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.NetThreadComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("NetThreadComponentSystem", function (namespace)
    local Stop, Add, Remove
    Stop = function (self)
    end
    Add = function (self, kService)
      -- 这里要去下一帧添加，避免foreach错误
      self.ThreadSynchronizationContext:PostNext(function ()
        if kService:IsDispose() then
          return
        end
        self.Services:Add(kService)
      end)
    end
    Remove = function (self, kService)
      -- 这里要去下一帧删除，避免foreach错误
      self.ThreadSynchronizationContext:PostNext(function ()
        if kService:IsDispose() then
          return
        end
        self.Services:Remove(kService)
      end)
    end
    return {
      Stop = Stop,
      Add = Add,
      Remove = Remove
    }
  end)
end)
