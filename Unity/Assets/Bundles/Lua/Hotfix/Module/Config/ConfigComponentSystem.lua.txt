-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ListTask = System.List(System.Task)
local ArrayByte = System.Array(System.Byte)
local DictStringArrayByte = System.Dictionary(System.String, ArrayByte)
System.namespace("ET", function (namespace)
  namespace.class("ConfigAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self)
      ET.ConfigComponent.Instance = self
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_1(out.ET.ConfigComponent)
        }
      end,
      Awake = Awake,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ConfigDestroySystem", function (namespace)
    local Destroy
    Destroy = function (this, self)
      ET.ConfigComponent.Instance = nil
    end
    return {
      base = function (out)
        return {
          out.ET.DestroySystem_1(out.ET.ConfigComponent)
        }
      end,
      Destroy = Destroy,
      __metadata__ = function (out)
        return {
          class = { 0x6, out.ET.ObjectSystemAttribute() }
        }
      end
    }
  end)

  namespace.class("ConfigComponentSystem", function (namespace)
    local Load, LoadAsync, LoadOneInThread
    Load = function (self)
      self.AllConfig:Clear()
      local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.ConfigAttribute))

      local configBytes = DictStringArrayByte()
      ET.ConfigComponent.GetAllConfigBytes(types, configBytes)

      for _, type in System.each(types) do
        LoadOneInThread(self, type, configBytes)
      end
    end
    LoadAsync = function (self)
      return System.async(function (async, self)
        self.AllConfig:Clear()
        local types = ET.Game.getEventSystem():GetTypes(System.typeof(ET.ConfigAttribute))

        local configBytes = DictStringArrayByte()
        ET.ConfigComponent.GetAllConfigBytes(types, configBytes)

        local listTasks = ListTask()

        for _, type in System.each(types) do
          local task = System.Task.Run(function ()
            LoadOneInThread(self, type, configBytes)
          end)
          listTasks:Add(task)
        end

        async:await(System.Task.WhenAll(nil, listTasks:ToArray()))
      end, nil, self)
    end
    LoadOneInThread = function (self, configType, configBytes)
      local oneConfigBytes = configBytes:get(configType:getName())

      local category = ET.ProtobufHelper.FromBytes(configType, oneConfigBytes, 0, #oneConfigBytes)

      -- lock(self)
      do
        self.AllConfig:set(configType, category)
      end
    end
    return {
      Load = Load,
      LoadAsync = LoadAsync
    }
  end)
end)
