-- Generated by CSharp.lua Compiler
local System = System
local ET = ET
local ETCold = ETCold
local UnityEngine = UnityEngine
local ET
local DictStringUI
System.import(function (out)
  ET = out.ET
  DictStringUI = System.Dictionary(System.String, ET.UI)
end)
System.namespace("ET", function (namespace)
  namespace.class("UIAwakeSystem", function (namespace)
    local Awake
    Awake = function (this, self, name, gameObject)
      self:Awake(name, gameObject)
    end
    return {
      base = function (out)
        return {
          out.ET.AwakeSystem_3(out.ET.UI, System.String, out.UnityEngine.GameObject)
        }
      end,
      Awake = Awake
    }
  end)

  namespace.class("UI", function (namespace)
    local Awake, Dispose, SetAsFirstSibling, Add, Remove, Get, class, __ctor__
    __ctor__ = function (this)
      this.nameChildren = DictStringUI()
      System.base(this).__ctor__(this)
    end
    Awake = function (this, name, gameObject)
      this.nameChildren:Clear()
      local componentView = System.as(gameObject:AddComponent(System.typeof(ETCold.ComponentView)), ETCold.ComponentView)
      componentView:setComponent(this)
      gameObject:setlayer(UnityEngine.LayerMask.NameToLayer("UI" --[[LayerNames.UI]]))
      this.Name = name
      this.GameObject = gameObject
    end
    Dispose = function (this)
      if this:getIsDisposed() then
        return
      end

      System.base(this).Dispose(this)

      for _, ui in System.each(this.nameChildren:getValues()) do
        Dispose(ui)
      end

      UnityEngine.Object.Destroy(this.GameObject)
      this.nameChildren:Clear()
    end
    SetAsFirstSibling = function (this)
      this.GameObject:gettransform():SetAsFirstSibling()
    end
    Add = function (this, ui)
      this.nameChildren:AddKeyValue(ui.Name, ui)
      ui:setParent(this)
    end
    Remove = function (this, name)
      local ui
      local default
      default, ui = this.nameChildren:TryGetValue(name)
      if not default then
        return
      end
      this.nameChildren:RemoveKey(name)
      Dispose(ui)
    end
    Get = function (this, name)
      local child
      local default
      default, child = this.nameChildren:TryGetValue(name)
      if default then
        return child
      end
      local extern = this.GameObject:gettransform():Find(name)
      if extern ~= nil then
        extern = extern:getgameObject()
      end
      local childGameObject = extern
      if UnityEngine.Object.op_Equality(childGameObject, nil) then
        return nil
      end
      child = ET.EntityFactory.Create2(this:getDomain(), name, childGameObject, false, class, System.String, UnityEngine.GameObject)
      Add(this, child)
      return child
    end
    class = {
      base = function (out)
        return {
          out.ET.Entity
        }
      end,
      Awake = Awake,
      Dispose = Dispose,
      SetAsFirstSibling = SetAsFirstSibling,
      Add = Add,
      Remove = Remove,
      Get = Get,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
