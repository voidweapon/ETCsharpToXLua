-- Generated by CSharp.lua Compiler
local System = System
System.namespace("ET", function (namespace)
  namespace.class("MultiDictionary_3", function (namespace)
    return function (T, M, N)
      local TryGetDic, TryGetValue1, Add, Remove1, ContainSubKey, ContainValue
      local DictMN = System.Dictionary(M, N)
      TryGetDic = function (this, t, k)
        local default
        default, k = this:TryGetValue(t)
        return default, k
      end
      TryGetValue1 = function (this, t, m, n)
        n = System.default(N)

        local default, dic = this:TryGetValue(t)
        if not default then
          return false, n
        end

        local extern
        extern, n = dic:TryGetValue(m)
        return extern, n
      end
      Add = function (this, t, m, n)
        local kSet
        local _
        _, kSet = this:TryGetValue(t)
        if kSet == nil then
          kSet = DictMN()
          this:set(t, kSet)
        end

        kSet:AddKeyValue(m, n)
      end
      Remove1 = function (this, t, m)
        local _, dic = this:TryGetValue(t)
        if dic == nil or not dic:RemoveKey(m) then
          return false
        end

        if dic:getCount() == 0 then
          this:RemoveKey(t)
        end

        return true
      end
      ContainSubKey = function (this, t, m)
        local _, dic = this:TryGetValue(t)
        if dic == nil then
          return false
        end

        return dic:ContainsKey(m)
      end
      ContainValue = function (this, t, m, n)
        local _, dic = this:TryGetValue(t)
        if dic == nil then
          return false
        end

        if not dic:ContainsKey(m) then
          return false
        end

        return dic:ContainsValue(n)
      end
      return {
        base = function (out)
          return {
            System.Dictionary(T, System.Dictionary(M, N))
          }
        end,
        TryGetDic = TryGetDic,
        TryGetValue1 = TryGetValue1,
        Add = Add,
        Remove1 = Remove1,
        ContainSubKey = ContainSubKey,
        ContainValue = ContainValue
      }
    end
  end)
end)
