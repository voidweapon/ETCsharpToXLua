-- Generated by CSharp.lua Compiler
local System = System
local ArrayByte = System.Array(System.Byte)
local ArrayInt32 = System.Array(System.Int32)
System.namespace("ET", function (namespace)
  namespace.class("RandomEx", function (namespace)
    local RandUInt64, RandInt32, RandUInt32, RandInt64
    RandUInt64 = function (random)
      local byte8 = ArrayByte(8)
      random:NextBytes(byte8)
      return System.BitConverter.ToUInt64(byte8, 0)
    end
    RandInt32 = function (random)
      return random:Next()
    end
    RandUInt32 = function (random)
      return System.toUInt32(random:Next())
    end
    RandInt64 = function (random)
      local byte8 = ArrayByte(8)
      random:NextBytes(byte8)
      return System.BitConverter.ToInt64(byte8, 0)
    end
    return {
      RandUInt64 = RandUInt64,
      RandInt32 = RandInt32,
      RandUInt32 = RandUInt32,
      RandInt64 = RandInt64
    }
  end)

  namespace.class("RandomHelper", function (namespace)
    local RandUInt64, RandInt32, RandUInt32, RandInt64, RandomNumber, NextLong, RandomBool, RandomArray, 
    RandomArray_Len2, RandomArray1, BreakRank, GetRandoms, GetRandListByCount, RandFloat01, Rand, RandomByWeight, 
    RandomByWeight1, RandomByWeight2, RandomByWeight3, class, static
    static = function (this)
      this.random = System.Random()
    end
    RandUInt64 = function ()
      local byte8 = ArrayByte(8)
      class.random:NextBytes(byte8)
      return System.BitConverter.ToUInt64(byte8, 0)
    end
    RandInt32 = function ()
      return class.random:Next()
    end
    RandUInt32 = function ()
      return System.toUInt32(class.random:Next())
    end
    RandInt64 = function ()
      local byte8 = ArrayByte(8)
      class.random:NextBytes(byte8)
      return System.BitConverter.ToInt64(byte8, 0)
    end
    -- <summary>
    -- 获取lower与Upper之间的随机数,包含下限，不包含上限
    -- </summary>
    -- <param name="lower"></param>
    -- <param name="upper"></param>
    -- <returns></returns>
    RandomNumber = function (lower, upper)
      local value = class.random:Next(lower, upper)
      return value
    end
    NextLong = function (minValue, maxValue)
      if minValue > maxValue then
        System.throw(System.ArgumentException("minValue is great than maxValue", "minValue"))
      end

      local num = maxValue - minValue
      return minValue + System.ToInt64(class.random:NextDouble() * num)
    end
    RandomBool = function ()
      return class.random:Next(2) == 0
    end
    RandomArray = function (array, T)
      return array:get(RandomNumber(0, #array))
    end
    RandomArray_Len2 = function (array)
      return RandomNumber(array:get(0), array:get(1))
    end
    RandomArray1 = function (array, T)
      return array:get(RandomNumber(0, #array))
    end
    -- <summary>
    -- 打乱数组
    -- </summary>
    -- <typeparam name="T"></typeparam>
    -- <param name="arr">要打乱的数组</param>
    BreakRank = function (arr, T)
      if arr == nil or #arr < 2 then
        return
      end

      for i = 0, #arr - 1 do
        local index = class.random:Next(0, #arr)
        local temp = arr:get(index)
        arr:set(index, arr:get(i))
        arr:set(i, temp)
      end
    end
    GetRandoms = function (sum, min, max)
      local arr = ArrayInt32(sum)
      local j = 0
      --表示键和值对的集合。
      local hashtable = System.Hashtable()
      local rm = class.random
      while hashtable:getCount() < sum do
        --返回一个min到max之间的随机数
        local nValue = rm:Next(min, max)
        -- 是否包含特定值
        if not hashtable:ContainsValue(nValue) then
          --把键和值添加到hashtable
          hashtable:AddKeyValueObj(nValue, nValue)
          arr:set(j, nValue)
          j = j + 1
        end
      end

      return arr
    end
    -- <summary>
    -- 随机从数组中取若干个不重复的元素，
    -- 为了降低算法复杂度，所以是伪随机，对随机要求不是非常高的逻辑可以用
    -- </summary>
    -- <typeparam name="T"></typeparam>
    -- <param name="sourceList"></param>
    -- <param name="destList"></param>
    -- <param name="randCount"></param>
    GetRandListByCount = function (sourceList, destList, randCount, T)
      if sourceList == nil or destList == nil or randCount < 0 then
        return false
      end

      destList:Clear()

      if randCount >= #sourceList then
        for _, val in System.each(sourceList) do
          destList:Add(val)
        end

        return true
      end

      if randCount == 0 then
        return true
      end
      local beginIndex = class.random:Next(0, #sourceList - 1)
      for i = beginIndex, beginIndex + randCount - 1 do
        destList:Add(sourceList:get(System.mod(i, #sourceList)))
      end

      return true
    end
    RandFloat01 = function ()
      local a = RandomNumber(0, 1000000)
      return a / 1000000
    end
    Rand = function (n)
      -- 注意，返回值是左闭右开，所以maxValue要加1
      return class.random:Next(1, n + 1)
    end
    -- <summary>
    -- 通过权重随机
    -- </summary>
    -- <param name="weights"></param>
    -- <returns></returns>
    RandomByWeight = function (weights)
      local sum = 0
      for i = 0, #weights - 1 do
        sum = sum + weights:get(i)
      end

      local number_rand = Rand(sum)

      local sum_temp = 0

      for i = 0, #weights - 1 do
        sum_temp = sum_temp + weights:get(i)
        if number_rand <= sum_temp then
          return i
        end
      end

      return - 1
    end
    RandomByWeight1 = function (weights)
      if #weights == 0 then
        return - 1
      end

      if #weights == 1 then
        return 0
      end

      local sum = 0
      for i = 0, #weights - 1 do
        sum = sum + weights:get(i)
      end

      local number_rand = Rand(sum)

      local sum_temp = 0

      for i = 0, #weights - 1 do
        sum_temp = sum_temp + weights:get(i)
        if number_rand <= sum_temp then
          return i
        end
      end

      return - 1
    end
    RandomByWeight2 = function (weights, weightRandomMinVal)
      if #weights == 0 then
        return - 1
      end

      if #weights == 1 then
        return 0
      end

      local sum = 0
      for i = 0, #weights - 1 do
        sum = sum + weights:get(i)
      end

      local number_rand = Rand(math.Max(sum, weightRandomMinVal))

      local sum_temp = 0

      for i = 0, #weights - 1 do
        sum_temp = sum_temp + weights:get(i)
        if number_rand <= sum_temp then
          return i
        end
      end

      return - 1
    end
    RandomByWeight3 = function (weights)
      if #weights == 0 then
        return - 1
      end

      if #weights == 1 then
        return 0
      end

      local sum = 0
      for i = 0, #weights - 1 do
        sum = sum + weights:get(i)
      end

      local number_rand = NextLong(1, sum + 1)

      local sum_temp = 0

      for i = 0, #weights - 1 do
        sum_temp = sum_temp + weights:get(i)
        if number_rand <= sum_temp then
          return i
        end
      end

      return - 1
    end
    class = {
      RandUInt64 = RandUInt64,
      RandInt32 = RandInt32,
      RandUInt32 = RandUInt32,
      RandInt64 = RandInt64,
      RandomNumber = RandomNumber,
      NextLong = NextLong,
      RandomBool = RandomBool,
      RandomArray = RandomArray,
      RandomArray_Len2 = RandomArray_Len2,
      RandomArray1 = RandomArray1,
      BreakRank = BreakRank,
      GetRandoms = GetRandoms,
      GetRandListByCount = GetRandListByCount,
      RandFloat01 = RandFloat01,
      RandomByWeight = RandomByWeight,
      RandomByWeight1 = RandomByWeight1,
      RandomByWeight2 = RandomByWeight2,
      RandomByWeight3 = RandomByWeight3,
      static = static
    }
    return class
  end)
end)
