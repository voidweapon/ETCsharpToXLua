-- Generated by CSharp.lua Compiler
local System = System
local SystemGlobalization = System.Globalization
local SystemText = System.Text
local ArrayByte = System.Array(System.Byte)
System.namespace("ET", function (namespace)
  namespace.class("StringHelper", function (namespace)
    local ToBytes, ToByteArray, ToUtf8, HexToBytes, Fmt, ListToString
    ToBytes = function (str)
      local byteArray = SystemText.Encoding.getDefault():GetBytes(str)
      return byteArray
    end
    ToByteArray = function (str)
      local byteArray = SystemText.Encoding.getDefault():GetBytes(str)
      return byteArray
    end
    ToUtf8 = function (str)
      local byteArray = SystemText.Encoding.getUTF8():GetBytes(str)
      return byteArray
    end
    HexToBytes = function (hexString)
      if System.mod(#hexString, 2) ~= 0 then
        System.throw(System.ArgumentException(System.String.Format(SystemGlobalization.CultureInfo.getInvariantCulture(), "The binary key cannot have an odd number of digits: {0}", hexString)))
      end

      local hexAsBytes = ArrayByte(System.div(#hexString, 2))
      for index = 0, #hexAsBytes - 1 do
        local byteValue = ""
        byteValue = byteValue .. string.char(hexString:get(index * 2))
        byteValue = byteValue .. string.char(hexString:get(index * 2 + 1))
        hexAsBytes:set(index, System.Byte.Parse(byteValue, SystemGlobalization.NumberStyles.HexNumber, SystemGlobalization.CultureInfo.getInvariantCulture()))
      end
      return hexAsBytes
    end
    Fmt = function (text, args)
      return System.String.Format(text, args)
    end
    ListToString = function (list, T)
      local sb = System.StringBuilder()
      for _, t in System.each(list) do
        sb:Append(t)
        sb:Append(",")
      end
      return sb:ToString()
    end
    return {
      ToBytes = ToBytes,
      ToByteArray = ToByteArray,
      ToUtf8 = ToUtf8,
      HexToBytes = HexToBytes,
      Fmt = Fmt,
      ListToString = ListToString
    }
  end)
end)
