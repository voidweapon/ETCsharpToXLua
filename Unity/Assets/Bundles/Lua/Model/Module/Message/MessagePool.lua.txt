-- Generated by CSharp.lua Compiler
local System = System
local QueueObject = System.Queue(System.Object)
local DictTypeQueueObject = System.Dictionary(System.Type, QueueObject)
System.namespace("ET", function (namespace)
  -- 客户端为了0GC需要消息池，服务端消息需要跨协程不需要消息池
  namespace.class("MessagePool", function (namespace)
    local Instance, Fetch, Fetch1, Recycle, class, static, __ctor__
    static = function (this)
      Instance = class()
      this.Instance = Instance
    end
    __ctor__ = function (this)
      this.dictionary = DictTypeQueueObject()
    end
    Fetch = function (this, type)
      local queue
      local default
      default, queue = this.dictionary:TryGetValue(type)
      if not default then
        queue = QueueObject()
        this.dictionary:AddKeyValue(type, queue)
      end

      local obj
      if #queue > 0 then
        obj = queue:Dequeue()
      else
        obj = System.Activator.CreateInstance(type)
      end

      return obj
    end
    Fetch1 = function (this, T)
      local t = System.cast(T, Fetch(this, System.typeof(T)))
      return t
    end
    Recycle = function (this, obj)
      --[[
#if !NOT_CLIENT
            Type type = obj.GetType();
            Queue<object> queue;
            if (!this.dictionary.TryGetValue(type, out queue))
            {
                queue = new Queue<object>();
                this.dictionary.Add(type, queue);
            }

            queue.Enqueue(obj);
#endif
]]
    end
    class = {
      Fetch = Fetch,
      Fetch1 = Fetch1,
      Recycle = Recycle,
      static = static,
      __ctor__ = __ctor__
    }
    return class
  end)
end)
